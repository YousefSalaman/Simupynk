
import Simupynk.components as comps
from Simupynk.runners import available_runners
from Simupynk.components.systems import BaseSystem


class MainSystem(BaseSystem):

    _main_systems = []

    default_name = comps.generate_default_name("main")

    has_init_cond = comps.generate_has_init_cond(False)

    input_info = comps.generate_input_info(None)

    output_info = comps.generate_output_info(None)

    parameter_info = comps.generate_parameter_info(None)

    def __init__(self, name, runner_name):

        self._main_systems.append(self)  # Register main system in class

        self.main_sys = self  # State that you're the main system to your inner system components
        self.name_mgr = _NameManager()  # A "namespace" to register components
        self.runner_name = runner_name

        self._verify_runner_type(runner_name)
        self.name_mgr.verify_custom_component_name(name)  # Register main system name in its own namespace

        super().__init__(name=name)

    def build_system(self):
        """
        This method will do the following:

        [1] Verify the properties for each component in the system follows the
            criteria established by each component, respectively.

        [2] It will determine in what order the system will execute each
            component

        [3] It will generate the code string for the system.
        """

        self.verify_system_component_properties()
        self.organize_system()
        self.generate_component_string()

    @classmethod
    def build_systems(cls):
        """
        For multiple main systems that share the same system class, you can use
        this method to build all of them.
        """

        for main_sys in cls._main_systems:
            main_sys.build_system()

    @staticmethod
    def _verify_runner_type(runner_name):

        if runner_name is None:
            raise NameError('A "main" system must specify a runner name. '
                            f'Here is a list of the available runner names: {", ".join(available_runners)}')

        if not isinstance(runner_name, str):
            raise TypeError('The argument "runner_name" has to be a string')

        if runner_name not in available_runners:
            raise ModuleNotFoundError(f'A runner with the name "{runner_name}" was not found. ' +
                                      f'The available runner names are {", ".join(available_runners)}.')


class _NameManager:
    """
    This is the name manager for system components. It keep tracks of the
    variables registered in the system. The information kept within the name
    registry in a NameManager object is used to ensure components are given
    unique names to correctly reference variables within calculations.

    The name registry attribute "_sys_var_names" keeps track of how many times
    a variable has been used in a system to make sure repeated generated
    variable names are given a unique name within the system.
    """

    def __init__(self):

        self._sys_var_names = {}  # Name registry for a system

    def generate_component_name(self, comp_obj):
        """
        Generate a name for a component if one wasn't assigned to it. The name
        is generated by using the default name of the component, it's container
        system and the amount of times this combination of names has been
        registered in the system's name manager.
        """

        comp_obj_sys = comp_obj.sys  # Component's system container
        main_sys = comp_obj_sys.main_sys  # System that contains all components
        comp_is_a_system = hasattr(comp_obj, "sys_comps")

        comp_name = comp_obj.default_name
        if not (comp_obj_sys is main_sys or comp_is_a_system):
            comp_name += "_" + comp_obj_sys.name
        return self._register_component_name(comp_name)

    def verify_custom_component_name(self, comp_name):
        """
        This will verify if the custom component name was registered in the
        name manager. If it was registered, it will produce a NameError
        indicating this.
        """

        if comp_name in self._sys_var_names:
            raise NameError(f'The name "{comp_name}" was registered more than once.')
        return self._register_component_name(comp_name)

    def _register_component_name(self, comp_name):

        if comp_name in self._sys_var_names:  # Update name registry
            new_comp_name = comp_name + "_" + str(self._sys_var_names[comp_name])
            self._sys_var_names[comp_name] += 1
            return new_comp_name

        # Register name
        self._sys_var_names[comp_name] = 1
        return comp_name
