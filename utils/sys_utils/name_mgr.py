"""
This module contains the NameManager class for keeping track of all the
variables within a system. The information kept within the name registry in a
NameManager object is used to ensure components are given unique names to
correctly reference variables within calculations.
"""


class NameManager:
    """
    This is the name manager for system components. It keep tracks of the
    variables registered in the system, so the system's components can
    correctly mix together the different component code strings.

    The name registry attribute "_sys_var_names" keeps track of how many times
    a variable has been used in a system to make sure repeated generated
    variable names are given a unique name within the system.
    """

    def __init__(self):

        self._sys_var_names = {}  # Name registry for a system

    def generateComponentName(self, comp_obj):
        """
        Generate a name for a component if one wasn't assigned to it. The name
        is generated by using the default name of the component, it's container
        system and the amount of times this combination of names has been
        registered in the system's name manager.
        """

        comp_name = ""
        comp_obj_sys = comp_obj.sys  # Component's system container

        if hasattr(comp_obj, "name_mgr"):  # If component is system component
            if comp_obj_sys is not None:  # If system is not the "main" system
                comp_name += comp_obj_sys.name

        else:  # If component is not a system component
            comp_name += comp_obj.default_name
            if comp_obj_sys.sys is not None:  # If component's container system is not the "main" system
                comp_name += "_" + comp_obj_sys.default_name

        return self._registerComponentName(comp_name)

    def verifyCustomComponentName(self, comp_name):
        """
        This will verify if the custom component name was registered in the
        name manager. If it was registered, it will produce a NameError
        indicating this.
        """

        if comp_name in self._sys_var_names:
            raise NameError('The name "{}" was registered more than once.'.format(comp_name))
        return self._registerComponentName(comp_name)

    def _registerComponentName(self, comp_name):

        if comp_name in self._sys_var_names:  # Update name registry
            new_comp_name = comp_name + "_" + str(self._sys_var_names[comp_name])
            self._sys_var_names[comp_name] += 1
            return new_comp_name

        # Register name
        self._sys_var_names[comp_name] = 1
        return comp_name
